// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Entity denormalization can denormalize already partially denormalized data 1`] = `
Array [
  Menu {
    "food": Food {
      "id": "1",
    },
    "id": "1",
  },
  true,
  false,
  Object {
    "Food": Object {
      "[object Object]": Food {
        "id": "1",
      },
    },
    "Menu": Object {
      "1": Menu {
        "food": Food {
          "id": "1",
        },
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization can denormalize already partially denormalized data 2`] = `
Array [
  Menu {
    "food": Food {
      "id": "1",
    },
    "id": "1",
  },
  true,
  false,
  Object {
    "Food": Object {
      "Map { \\"id\\": \\"1\\" }": Food {
        "id": "1",
      },
    },
    "Menu": Object {
      "1": Menu {
        "food": Food {
          "id": "1",
        },
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes an entity 1`] = `
Array [
  Tacos {
    "alias": undefined,
    "id": "1",
    "name": "",
    "type": "foo",
  },
  true,
  false,
  Object {
    "Tacos": Object {
      "1": Tacos {
        "alias": undefined,
        "id": "1",
        "name": "",
        "type": "foo",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes an entity 2`] = `
Array [
  Tacos {
    "alias": undefined,
    "id": "1",
    "name": "",
    "type": "foo",
  },
  true,
  false,
  Object {
    "Tacos": Object {
      "1": Tacos {
        "alias": undefined,
        "id": "1",
        "name": "",
        "type": "foo",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities 1`] = `
Array [
  Menu {
    "food": Food {
      "id": "1",
    },
    "id": "1",
  },
  true,
  false,
  Object {
    "Food": Object {
      "1": Food {
        "id": "1",
      },
    },
    "Menu": Object {
      "1": Menu {
        "food": Food {
          "id": "1",
        },
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities 2`] = `
Array [
  Menu {
    "food": Food {
      "id": "1",
    },
    "id": "1",
  },
  true,
  false,
  Object {
    "Food": Object {
      "1": Food {
        "id": "1",
      },
    },
    "Menu": Object {
      "1": Menu {
        "food": Food {
          "id": "1",
        },
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities 3`] = `
Array [
  Menu {
    "food": Food {
      "id": undefined,
    },
    "id": "2",
  },
  true,
  false,
  Object {
    "Menu": Object {
      "2": Menu {
        "food": Food {
          "id": undefined,
        },
        "id": "2",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities 4`] = `
Array [
  Menu {
    "food": Food {
      "id": undefined,
    },
    "id": "2",
  },
  false,
  false,
  Object {
    "Menu": Object {
      "2": Menu {
        "food": Food {
          "id": undefined,
        },
        "id": "2",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities with records 1`] = `
Array [
  Menu {
    "food": Food {
      "id": "1",
    },
    "id": "1",
  },
  true,
  false,
  Object {
    "Food": Object {
      "1": Food {
        "id": "1",
      },
    },
    "Menu": Object {
      "1": Menu {
        "food": Food {
          "id": "1",
        },
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities with records 2`] = `
Array [
  Menu {
    "food": Food {
      "id": "1",
    },
    "id": "1",
  },
  true,
  false,
  Object {
    "Food": Object {
      "1": Food {
        "id": "1",
      },
    },
    "Menu": Object {
      "1": Menu {
        "food": Food {
          "id": "1",
        },
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities with records 3`] = `
Array [
  Menu {
    "food": null,
    "id": "2",
  },
  true,
  false,
  Object {
    "Menu": Object {
      "2": Menu {
        "food": null,
        "id": "2",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes deep entities with records 4`] = `
Array [
  Menu {
    "food": null,
    "id": "2",
  },
  true,
  false,
  Object {
    "Menu": Object {
      "2": Menu {
        "food": null,
        "id": "2",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes recursive dependencies 1`] = `
Report {
  "draftedBy": User {
    "id": "456",
    "reports": Array [
      [Circular],
    ],
    "role": "manager",
  },
  "id": "123",
  "publishedBy": User {
    "id": "456",
    "reports": Array [
      [Circular],
    ],
    "role": "manager",
  },
  "title": "Weekly report",
}
`;

exports[`Entity denormalization denormalizes recursive dependencies 2`] = `
Report {
  "draftedBy": User {
    "id": "456",
    "reports": Immutable.List [
      Immutable.Map {
        "id": "123",
        "title": "Weekly report",
        "draftedBy": "456",
        "publishedBy": "456",
      },
    ],
    "role": "manager",
  },
  "id": "123",
  "publishedBy": User {
    "id": "456",
    "reports": Immutable.List [
      Immutable.Map {
        "id": "123",
        "title": "Weekly report",
        "draftedBy": "456",
        "publishedBy": "456",
      },
    ],
    "role": "manager",
  },
  "title": "Weekly report",
}
`;

exports[`Entity denormalization denormalizes recursive dependencies 3`] = `
User {
  "id": "456",
  "reports": Array [
    Report {
      "draftedBy": [Circular],
      "id": "123",
      "publishedBy": [Circular],
      "title": "Weekly report",
    },
  ],
  "role": "manager",
}
`;

exports[`Entity denormalization denormalizes recursive dependencies 4`] = `
User {
  "id": "456",
  "reports": Immutable.List [
    Report {
      "draftedBy": Immutable.Map {
        "id": "456",
        "role": "manager",
        "reports": Immutable.List [
          "123",
        ],
      },
      "id": "123",
      "publishedBy": Immutable.Map {
        "id": "456",
        "role": "manager",
        "reports": Immutable.List [
          "123",
        ],
      },
      "title": "Weekly report",
    },
  ],
  "role": "manager",
}
`;

exports[`Entity denormalization denormalizes to undefined for deleted data 1`] = `
Array [
  Menu {
    "food": undefined,
    "id": "1",
  },
  true,
  true,
  Object {
    "Menu": Object {
      "1": Menu {
        "food": undefined,
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes to undefined for deleted data 2`] = `
Array [
  Menu {
    "food": undefined,
    "id": "1",
  },
  true,
  true,
  Object {
    "Menu": Object {
      "1": Menu {
        "food": undefined,
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes to undefined for deleted data 3`] = `
Array [
  undefined,
  true,
  true,
  Object {},
]
`;

exports[`Entity denormalization denormalizes to undefined for deleted data 4`] = `
Array [
  undefined,
  true,
  true,
  Object {},
]
`;

exports[`Entity denormalization denormalizes to undefined for missing data 1`] = `
Array [
  Menu {
    "food": undefined,
    "id": "1",
  },
  true,
  false,
  Object {
    "Menu": Object {
      "1": Menu {
        "food": undefined,
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes to undefined for missing data 2`] = `
Array [
  Menu {
    "food": undefined,
    "id": "1",
  },
  false,
  false,
  Object {
    "Menu": Object {
      "1": Menu {
        "food": undefined,
        "id": "1",
      },
    },
  },
]
`;

exports[`Entity denormalization denormalizes to undefined for missing data 3`] = `
Array [
  undefined,
  false,
  false,
  Object {},
]
`;

exports[`Entity denormalization denormalizes to undefined for missing data 4`] = `
Array [
  undefined,
  false,
  false,
  Object {},
]
`;

exports[`Entity normalization mergeStrategy can use a custom merging strategy 1`] = `
Object {
  "entities": Object {
    "MergeTaco": Object {
      "1": MergeTaco {
        "alias": "bar",
        "id": "1",
        "name": "foo",
      },
    },
  },
  "indexes": Object {},
  "result": Array [
    "1",
    "1",
  ],
}
`;

exports[`Entity normalization mergeStrategy defaults to plain merging 1`] = `
Object {
  "entities": Object {
    "Tacos": Object {
      "1": Object {
        "alias": "bar",
        "id": "1",
        "name": "bar",
      },
    },
  },
  "indexes": Object {},
  "result": Array [
    "1",
    "1",
  ],
}
`;

exports[`Entity normalization normalizes an entity 1`] = `
Object {
  "entities": Object {
    "MyEntity": Object {
      "1": Object {
        "id": "1",
      },
    },
  },
  "indexes": Object {},
  "result": "1",
}
`;

exports[`Entity normalization pk() can build the entity's ID from the parent object 1`] = `
Object {
  "entities": Object {
    "User": Object {
      "tacos-user-4": Object {
        "id": "4",
        "name": "Jimmy",
      },
    },
  },
  "indexes": Object {},
  "result": Object {
    "name": "tacos",
    "user": "tacos-user-4",
  },
}
`;

exports[`Entity normalization pk() can normalize entity IDs based on their object key 1`] = `
Object {
  "entities": Object {
    "User": Object {
      "4": Object {
        "name": "taco",
      },
      "56": Object {
        "name": "burrito",
      },
    },
  },
  "indexes": Object {},
  "result": Object {
    "4": Object {
      "id": "4",
      "schema": "users",
    },
    "56": Object {
      "id": "56",
      "schema": "users",
    },
  },
}
`;

exports[`Entity normalization pk() can use a custom pk() string 1`] = `
Object {
  "entities": Object {
    "User": Object {
      "134351": Object {
        "idStr": "134351",
        "name": "Kathy",
      },
    },
  },
  "indexes": Object {},
  "result": "134351",
}
`;

exports[`Entity normalization should allow many unexpected as long as none are missing 1`] = `
Object {
  "entities": Object {
    "MyEntity": Object {
      "hi": Object {
        "a": "a",
        "b": "b",
        "c": "c",
        "d": "e",
        "e": 0,
        "f": 0,
        "g": 0,
        "h": 0,
        "i": 0,
        "j": 0,
        "k": 0,
        "l": 0,
        "m": 0,
        "n": 0,
        "name": "hi",
        "o": 0,
        "p": 0,
        "q": 0,
        "r": 0,
        "s": 0,
        "t": 0,
        "u": 0,
      },
    },
  },
  "indexes": Object {},
  "result": "hi",
}
`;

exports[`Entity normalization should only warn if at least four members are found with unexpected 1`] = `
Object {
  "entities": Object {
    "MyEntity": Object {
      "hi": Object {
        "a": "a",
        "b": "b",
        "c": "c",
        "d": "e",
        "e": 0,
        "f": 0,
        "g": 0,
        "h": 0,
        "i": 0,
        "j": 0,
        "k": 0,
        "l": 0,
        "m": 0,
        "n": 0,
        "name": "hi",
        "o": 0,
        "p": 0,
      },
    },
  },
  "indexes": Object {},
  "result": "hi",
}
`;

exports[`Entity normalization should only warn if at least four members are found with unexpected 2`] = `
Array [
  "Attempted to initialize MyEntity with a large number of unexpected keys found

  This is likely due to a malformed response.
  Try inspecting the network response or fetch() return value.
  Or use debugging tools: https://resthooks.io/docs/guides/debugging
  Learn more about schemas: https://resthooks.io/docs/api/schema
  If this is a mistake, you can disable this check by setting static automaticValidation = 'silent'

  Expected keys:
    Found: name,a,b,c
    Unexpected keys: d,e,f,g,h,i,j,k,l,m,n,o,p
  Value (processed): {
  \\"name\\": \\"hi\\",
  \\"a\\": \\"a\\",
  \\"b\\": \\"b\\",
  \\"c\\": \\"c\\",
  \\"d\\": \\"e\\",
  \\"e\\": 0,
  \\"f\\": 0,
  \\"g\\": 0,
  \\"h\\": 0,
  \\"i\\": 0,
  \\"j\\": 0,
  \\"k\\": 0,
  \\"l\\": 0,
  \\"m\\": 0,
  \\"n\\": 0,
  \\"o\\": 0,
  \\"p\\": 0
}",
]
`;

exports[`Entity normalization should throw a custom error if data does not include pk 1`] = `
"Missing usable primary key when normalizing response.

  This is likely due to a malformed response.
  Try inspecting the network response or fetch() return value.
  Or use debugging tools: https://resthooks.io/docs/guides/debugging
  Learn more about schemas: https://resthooks.io/docs/api/schema

  Entity: MyEntity
  Value (processed): {
  \\"secondthing\\": \\"hi\\"
}
  "
`;

exports[`Entity normalization should throw a custom error if data loads with half unexpected props 1`] = `
"Attempted to initialize MyEntity with a large number of unexpected keys found

  This is likely due to a malformed response.
  Try inspecting the network response or fetch() return value.
  Or use debugging tools: https://resthooks.io/docs/guides/debugging
  Learn more about schemas: https://resthooks.io/docs/api/schema
  If this is a mistake, you can disable this check by setting static automaticValidation = 'silent'

  Expected keys:
    Found: name
    Unexpected keys: nonexistantthing
  Value (processed): {
  \\"name\\": \\"hoho\\",
  \\"nonexistantthing\\": \\"hi\\"
}"
`;

exports[`Entity normalization should throw a custom error if data loads with no matching props 1`] = `
"Attempted to initialize MyEntity with no matching keys found

  This is likely due to a malformed response.
  Try inspecting the network response or fetch() return value.
  Or use debugging tools: https://resthooks.io/docs/guides/debugging
  Learn more about schemas: https://resthooks.io/docs/api/schema
  If this is a mistake, you can disable this check by setting static automaticValidation = 'silent'

  Expected keys:
    Found: 
    Missing: name,secondthing
  Value (processed): {}"
`;

exports[`Entity normalization should throw a custom error if data loads with string 1`] = `
"Unexpected input given to normalize. Expected type to be \\"object\\", found \\"string\\".

          Schema: {
  \\"name\\": \\"MyEntity\\",
  \\"schema\\": {},
  \\"key\\": \\"MyEntity\\"
}
          Input: \\"hibho\\""
`;

exports[`Entity normalization should throw a custom error if schema key is missing from Entity 1`] = `
"Schema key is missing in Entity

  Be sure all schema members are also part of the entity
  Or use debugging tools: https://resthooks.io/docs/guides/debugging
  Learn more about nesting schemas: https://resthooks.io/docs/guides/nested-response

  Entity keys: name,secondthing
  Schema key(missing): blarb
  "
`;

exports[`Entity normalization should throw a custom error loads with array 1`] = `
"Attempted to initialize MyEntity with an array, but named members were expected

This is likely due to a malformed response.
Try inspecting the network response or fetch() return value.
Or use debugging tools: https://resthooks.io/docs/guides/debugging
Learn more about schemas: https://resthooks.io/docs/api/schema
If this is a mistake, you can disable this check by setting static automaticValidation = 'silent'

Missing: name,secondthing
First three members: [
  {
    \\"name\\": \\"hi\\",
    \\"secondthing\\": \\"ho\\"
  },
  {
    \\"name\\": \\"hi\\",
    \\"secondthing\\": \\"ho\\"
  },
  {
    \\"name\\": \\"hi\\",
    \\"secondthing\\": \\"ho\\"
  }
]"
`;

exports[`Entity normalization should warn when automaticValidation === "warn" 1`] = `
Array [
  "Attempted to initialize MyEntity with an array, but named members were expected

This is likely due to a malformed response.
Try inspecting the network response or fetch() return value.
Or use debugging tools: https://resthooks.io/docs/guides/debugging
Learn more about schemas: https://resthooks.io/docs/api/schema
If this is a mistake, you can disable this check by setting static automaticValidation = 'silent'

Missing: secondthing
First three members: [
  {
    \\"name\\": \\"hi\\",
    \\"secondthing\\": \\"ho\\"
  },
  {
    \\"name\\": \\"hi\\",
    \\"secondthing\\": \\"ho\\"
  },
  {
    \\"name\\": \\"hi\\",
    \\"secondthing\\": \\"ho\\"
  }
]",
]
`;

exports[`Entity normalization should warn when automaticValidation === "warn" 2`] = `
Array [
  "Attempted to initialize MyEntity with a large number of unexpected keys found

  This is likely due to a malformed response.
  Try inspecting the network response or fetch() return value.
  Or use debugging tools: https://resthooks.io/docs/guides/debugging
  Learn more about schemas: https://resthooks.io/docs/api/schema
  If this is a mistake, you can disable this check by setting static automaticValidation = 'silent'

  Expected keys:
    Found: name
    Unexpected keys: nonexistantthing
  Value (processed): {
  \\"name\\": \\"hoho\\",
  \\"nonexistantthing\\": \\"hi\\"
}",
]
`;

exports[`fromJS can use a custom processing strategy 1`] = `
ProcessTaco {
  "alias": undefined,
  "id": "1",
  "name": "foo",
  "slug": "thing-1",
}
`;

exports[`fromJS can use information from the parent in the process strategy 1`] = `
ParentEntity {
  "child": ChildEntity {
    "content": "child",
    "id": "4",
    "parentId": "1",
    "parentKey": "child",
  },
  "content": "parent",
  "id": "1",
}
`;

exports[`fromJS is run before and passed to the schema denormalization 1`] = `
EntriesEntity {
  "data": Object {
    "attachment": AttachmentsEntity {
      "id": "456",
    },
  },
  "id": "123",
  "type": "message",
}
`;
