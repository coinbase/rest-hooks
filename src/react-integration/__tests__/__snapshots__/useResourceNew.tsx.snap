// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`useResourceNew() should dispatch an action that fetches 1`] = `
Object {
  "meta": Object {
    "options": undefined,
    "reject": [Function],
    "resolve": [Function],
    "responseType": "rest-hooks/receive",
    "schema": EntitySchema {
      "_getId": [Function],
      "_idAttribute": [Function],
      "_key": "http://test.com/article-cooler/",
      "_mergeStrategy": [Function],
      "_processStrategy": [Function],
      "denormalize": [Function],
      "schema": Object {},
    },
    "throttle": true,
    "url": "GET http://test.com/article-cooler/5",
  },
  "payload": [Function],
  "type": "rest-hooks/fetch",
}
`;

exports[`useResourceNew() should dispatch fetch when sent multiple arguments 1`] = `
Object {
  "meta": Object {
    "options": undefined,
    "reject": [Function],
    "resolve": [Function],
    "responseType": "rest-hooks/receive",
    "schema": EntitySchema {
      "_getId": [Function],
      "_idAttribute": [Function],
      "_key": "http://test.com/article-cooler/",
      "_mergeStrategy": [Function],
      "_processStrategy": [Function],
      "denormalize": [Function],
      "schema": Object {},
    },
    "throttle": true,
    "url": "GET http://test.com/article-cooler/5",
  },
  "payload": [Function],
  "type": "rest-hooks/fetch",
}
`;

exports[`useResourceNew() should dispatch fetch when sent multiple arguments 2`] = `
Object {
  "meta": Object {
    "options": undefined,
    "reject": [Function],
    "resolve": [Function],
    "responseType": "rest-hooks/receive",
    "schema": Array [
      EntitySchema {
        "_getId": [Function],
        "_idAttribute": [Function],
        "_key": "http://test.com/user/",
        "_mergeStrategy": [Function],
        "_processStrategy": [Function],
        "denormalize": [Function],
        "schema": Object {},
      },
    ],
    "throttle": true,
    "url": "GET http://test.com/user/",
  },
  "payload": [Function],
  "type": "rest-hooks/fetch",
}
`;

exports[`useResourceNewNew() should dispatch an action that fetches 1`] = `
Object {
  "meta": Object {
    "options": undefined,
    "reject": [Function],
    "resolve": [Function],
    "responseType": "rest-hooks/receive",
    "schema": EntitySchema {
      "_getId": [Function],
      "_idAttribute": [Function],
      "_key": "http://test.com/article-cooler/",
      "_mergeStrategy": [Function],
      "_processStrategy": [Function],
      "denormalize": [Function],
      "schema": Object {},
    },
    "throttle": true,
    "url": "GET http://test.com/article-cooler/5",
  },
  "payload": [Function],
  "type": "rest-hooks/fetch",
}
`;

exports[`useResourceNewNew() should dispatch fetch when sent multiple arguments 1`] = `
Object {
  "meta": Object {
    "options": undefined,
    "reject": [Function],
    "resolve": [Function],
    "responseType": "rest-hooks/receive",
    "schema": EntitySchema {
      "_getId": [Function],
      "_idAttribute": [Function],
      "_key": "http://test.com/article-cooler/",
      "_mergeStrategy": [Function],
      "_processStrategy": [Function],
      "denormalize": [Function],
      "schema": Object {},
    },
    "throttle": true,
    "url": "GET http://test.com/article-cooler/5",
  },
  "payload": [Function],
  "type": "rest-hooks/fetch",
}
`;

exports[`useResourceNewNew() should dispatch fetch when sent multiple arguments 2`] = `
Object {
  "meta": Object {
    "options": undefined,
    "reject": [Function],
    "resolve": [Function],
    "responseType": "rest-hooks/receive",
    "schema": Array [
      EntitySchema {
        "_getId": [Function],
        "_idAttribute": [Function],
        "_key": "http://test.com/user/",
        "_mergeStrategy": [Function],
        "_processStrategy": [Function],
        "denormalize": [Function],
        "schema": Object {},
      },
    ],
    "throttle": true,
    "url": "GET http://test.com/user/",
  },
  "payload": [Function],
  "type": "rest-hooks/fetch",
}
`;
